A.
1. -Wall : compiler warns if it sees questionable code.
2. -std=c99 specifies the exact version of the C language standard we’re using, which is C99. C99 allows us to declare variables 
anywhere within a function, whereas ANSI C requires all variables to be declared at the top of a function or block.

B.
1. canonical/cooked mode is when user is required to press ENTER for the input to register, what we want is RAW mode.
2. ECHO prints what you type in terminal so that we can see it, but we turn it off in RAW mode like when entering the sudo pwd.
3. We read the terminal attributes into the raw struct -> switched off echo -> set the attr ... TCSAFLUSH tells when to apply changes, in this case,
it waits for all pending output to be written to the terminal, and also discards any input that hasn’t been read.
4. c_lflags (local flags), we have to modify some flags for raw mode.
5. ECHO is a bitflag, defined as 00000000000000000000000000001000 in binary. 
We use the bitwise-NOT operator (~) on this value to get 11111111111111111111111111110111. 
We then bitwise-AND this value with the flags field, which forces the fourth bit in the flags field to become 0, and causes every other bit to retain its current value.

6. we store the original terminal attr in a global variable orig_termios and work with a copy of it in enableRawMode function.
7. when ICANON is set, terminal works in canonical mode, we unset it... now the program quits instantly when we press 'q'.

C.
1.Changed the exitting to CTRL + x.
2. note that EAGAIN is a special error code indicating that no data is available right now, but it's not a permanent error.
3. Escape seq always start with \x1b (27) and then [
Escape sequences instruct the terminal to do various text formatting tasks, such as coloring text, moving the cursor around, and clearing parts of the screen.
4. added Wno-strict-prototypes for that warning to go away.
5. should be able to get the size of the terminal by simply calling ioctl() with the TIOCGWINSZ request.

6. Rather than the repititive write() calls, we'll only call write on the buffer string thing which is our own dynamic string type
which supports one operation: appending.
7. realloc is used to resize the buffer. If the reallocation is successful, realloc returns a pointer to the newly allocated memory, else NULL.
memcpy copies the 's' to the end of the 'new'.. thus appending.

